dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
dasdas
cat(readLines(M), sep = "\n")
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 )
exit
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCXXFLAGS+=-flto -ffat-lto-objects  -Wno-unused-local-typedefs",
file = M, sep = "\n", append = TRUE)
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat(M)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
a=rep(1,20)
a
a=t(rep(1,20))
View(a)
View(a)
a=rep(1,20)
a
(1-.4^2)* .3^2
(1-.4^2)* (.3^2)
source('~/Dropbox/Ego/Matlab/ucl/self_other/Scripts/Modelling/Stan/stan4_fit_models_vb_dumbC.R', echo=TRUE)
tgttghyyyyrtyhy
?subset
array(0,c(19,200))
?array
sample(1:10000,1)
1:24
a=1:23
size(a)
size(a)
?colMeans
c(2,3)
?apply
DATA = readMat(paste('simdata.mat',sep=""))
## HOUSE-KEEPING
require(R.matlab) # for reading (readMAT) and writing (writeMAT) MAT-files (https://cran.r-project.org/web/packages/R.matlab/R.matlab.pdf)
require(matlab) # emulate matlab commands (https://cran.r-project.org/web/packages/matlab/matlab.pdf)
require(shinystan) # GUI for MCMC diagnostics and plots (https://cran.r-project.org/web/packages/shinystan/shinystan.pdf)
require(rstan) # [R] interface for STAN (https://cran.r-project.org/web/packages/rstan/rstan.pdf)
require(parallel) # for parallelisation (https://stat.ethz.ch/R-manual/R-devel/library/parallel/doc/parallel.pdf)
DATA = readMat(paste('simdata.mat',sep=""))
cwd
ls
pwd
readMat(paste('simdata.mat',sep=""))
setwd(base_dir,filesep,'Scripts',filesep,'STAN')
setwd(base_dir,filesep,'Scripts',filesep,'STAN')
setwd(paste(base_dir,filesep,'Scripts',filesep,'STAN'))
## SPECIFIFY COMPUTER
computer <- 0; # 0: macbook; 1: motorhead
if (computer==0) {
base_dir <- "/Users/dbang/Dropbox/Ego/Matlab/ucl/social_learn";
} else if (computer==1) {
base_dir <- "C:/Users/dbang/Dropbox/Ego/Matlab/ucl/social_learn";
}
setwd(paste(base_dir,filesep,'Scripts',filesep,'STAN'))
setwd(paste(base_dir,filesep,'Scripts',filesep,'STAN'))
debugSource('~/Dropbox/Ego/Matlab/ucl/social_learn/Scripts/STAN/stan_fit.R', echo=TRUE)
debugSource('~/Dropbox/Ego/Matlab/ucl/social_learn/Scripts/STAN/stan_fit.R', echo=TRUE)
debugSource('~/Dropbox/Ego/Matlab/ucl/social_learn/Scripts/STAN/stan_fit.R', echo=TRUE)
library(hBayesDM)
install.packages(hBayesDM)
install.packages("hBayesDM")
install.packages("hBayesDM", dependencies=TRUE)
install.packages('devtools') #assuming it is not already installed
install_github('andreacirilloac/updateR')
library(updateR)
install.packages("hBayesDM", dependencies=TRUE)
source('~/Downloads/Model-v10/Model_v10.R', echo=TRUE)
?corrtest
?cor.test
?loo
install.packages("loo")
require("loo")
?loo
?compare
WAIc
?waic
clc
exit
clc
log(.01)
log(0)
log(0)max(1,-Inf)
max(1,-Inf)
log(1)
log(1,.01)
max(0,.01)
?vb
## SPECIFIFY COMPUTER
computer <- 0; # 0: macbook; 1: motorhead
if (computer==0) {
base_dir <- "/Users/dbang/Dropbox/Ego/Matlab/ucl/self_other";
} else if (computer==1) {
base_dir <- "C:/Users/dbang/Dropbox/Ego/Matlab/ucl/self_other";
}
## HOUSE-KEEPING
require(R.matlab) # for reading (readMAT) and writing (writeMAT) MAT-files (https://cran.r-project.org/web/packages/R.matlab/R.matlab.pdf)
require(matlab) # emulate matlab commands (https://cran.r-project.org/web/packages/matlab/matlab.pdf)
require(shinystan) # GUI for MCMC diagnostics and plots (https://cran.r-project.org/web/packages/shinystan/shinystan.pdf)
require(rstan) # [R] interface for STAN (https://cran.r-project.org/web/packages/rstan/rstan.pdf)
require(parallel) # for parallelisation (https://stat.ethz.ch/R-manual/R-devel/library/parallel/doc/parallel.pdf)
?vb
exit
distribution = readMat("/data/maxent.mat")
require(matlab)
distribution = readMat("/data/maxent.mat")
require(R.matlab)
distribution = readMat("/data/maxent.mat")
distribution = readMat("/Users/dbang/Dropbox/Ego/Matlab/ucl/social_flex/Sara/simulation/data/maxent.mat")
distribution
distribution$maxent
distribution$maxent.cdist
distribution$maxent[1]
distribution$maxent[1,2]
distribution = readMat("/Users/dbang/Dropbox/Ego/Matlab/ucl/social_flex/Sara/simulation/data/maxent.mat")
distribution$cdist
profile = readRDS( file="data/partner-profile.rds")
profile = readRDS("/Users/dbang/Dropbox/Ego/Matlab/ucl/social_flex/Sara/simulation/data/partner-profile.rds")
debugSource('~/Dropbox/Ego/Matlab/ucl/social_flex/Sara/Simulation/design-task2.R', echo=TRUE)
debugSource('~/Dropbox/Ego/Matlab/ucl/social_flex/Sara/Simulation/design-task2.R', echo=TRUE)
prt
taskfmri
taskfmri$trial[i]
nrow
nagent
i%%
(nrow/nagent) == 0
taskfmri$dtheta[1]
taskfmri$run[1]
taskfmri$agent[1]
debugSource('~/Dropbox/Ego/Matlab/ucl/social_flex/Sara/Simulation/design-task2.R', echo=TRUE)
debugSource('~/Dropbox/Ego/Matlab/ucl/social_flex/Sara/Simulation/design-task2.R', echo=TRUE)
size(profile)
profile[sample(c(1:1000),1),,]
?sample
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
sample(c(1:1000),1)
source('~/Dropbox/Ego/Matlab/ucl/social_flex/Sara/Simulation/partner-profile2.R', echo=TRUE)
profile
profile = unique(profile)
profile
profile = unique(profile)
saveRDS(profile, file = "partner-profile.rds")
debugSource('~/Dropbox/Ego/Matlab/ucl/social_flex/Sara/Simulation/design-task2.R', echo=TRUE)
profile[sample(c(1:500),1),,]
size(profile)
profile[1]
profile[1,]
profile[1,,]
profile[1sample(c(1:500),1)]
sample(c(1:500),1)
profile[sample(c(1:500),1)]
debugSource('~/Dropbox/Ego/Matlab/ucl/social_flex/Sara/Simulation/design-task2.R', echo=TRUE)
data = readMat("/Users/dbang/Dropbox/Ego/Matlab/ucl/social_flex/Sara/simulation/data/data-for-sara.mat")
data = readMat("/Users/dbang/Dropbox/Ego/Matlab/ucl/social_flex/Sara/simulation/data/data_for_sara.mat")
data
task=data$data
task
task[1]
task.dtheta
data$data.dtheta
data$data
source('~/Dropbox/Shared/Elisa/PKU_collaboration/Exp1/analyses/comp_model/stan_extractParams_indiv_sensitivity_task1.R', echo=TRUE)
source('~/Dropbox/PKU_collaboration/Exp1/analyses/comp_model/stan_extractParams_indiv_sensitivity_task1.R', echo=TRUE)
Sys.setenv(USE_CXX14=1)
source('~/Dropbox/PKU_collaboration/Exp1/analyses/comp_model/stan_extractParams_indiv_sensitivity_task1.R', echo=TRUE)
clear all
clc
source('~/Dropbox/PKU_collaboration/Exp1/analyses/comp_model/stan_extractParams_indiv_sensitivity_task1.R', echo=TRUE)
source('~/Dropbox/PKU_collaboration/Exp1/analyses/comp_model/Utils/stanUtilities.R')
source('~/Dropbox/PKU_collaboration/Exp1/analyses/comp_model/Utils/diagnoseMCMC.R')
baseDir = "~/Dropbox/PKU_collaboration/Exp1/analyses/comp_model/modelfits/" #set working directory"
source('~/Dropbox/PKU_collaboration/Exp1/analyses/comp_model/stan_extractParams_indiv_sensitivity_task1.R', echo=TRUE)
rm(list=ls())
require(R.matlab)
require(rstan)
require(shinystan)
require(parallel)
require(loo)
require(boot)
source('~/Dropbox/PKU_collaboration/Exp1/analyses/comp_model/Utils/stanUtilities.R')
source('~/Dropbox/Shared/Elisa/PKU_collaboration/Exp1/analyses/comp_model/stan_extractParams_indiv_sensitivity_task1.R', echo=TRUE)
source('~/Dropbox/Shared/Elisa/PKU_collaboration/Exp1/analyses/comp_model/stan_extractParams_indiv_sensitivity_task1.R', echo=TRUE)
source('~/Dropbox/Shared/Elisa/PKU_collaboration/Exp1/analyses/comp_model/stan_extractParams_indiv_sensitivity_task1.R', echo=TRUE)
source('~/Dropbox/Shared/Elisa/PKU_collaboration/Exp1/analyses/comp_model/stan_extractParams_indiv_sensitivity_task1.R', echo=TRUE)
exit
updateR
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
source('~/Dropbox/ego/Matlab/ucl/self_other/Repository/Modelling/fit_models_in_stan_vb.R', echo=TRUE)
dir_data
cd dir_data
dir_date
dir_data
source('~/Dropbox/ego/Matlab/ucl/self_other/Repository/Modelling/fit_models_in_stan_vb.R', echo=TRUE)
